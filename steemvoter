#!/usr/bin/env python3
import argparse
from collections import OrderedDict
import logging
import threading
import time
import traceback
import sys

import humanfriendly

from steemvote.config import Config, ConfigError
from steemvote.monitor import Monitor

# Default interval for voting on eligible comments.
DEFAULT_VOTE_INTERVAL = 10 # 10 seconds.

def print_config(monitor):
    """Print info regarding monitor's configuration."""
    header = '---------- Steemvote Configuration ----------'
    footer = '-' * len(header)
    # Pad lengths so that all values are aligned.
    format_str = '{key:{pad_length}}: {value}'.format
    print(header)

    voting_config = OrderedDict()
    voting_config['Minimum post age'] = humanfriendly.format_timespan(monitor.min_post_age)
    voting_config['Maximum post age'] = humanfriendly.format_timespan(monitor.max_post_age)
    power_use = monitor.min_voting_power
    voting_config['Minimum voting power'] = '{power_use:.{decimals}%}'.format(power_use=power_use,
                                                decimals=len(str(power_use)) - 3)

    longest_key_length = max([len(i) for i in voting_config.keys()])
    for k, v in voting_config.items():
        print(format_str(key=k, value=v, pad_length=longest_key_length))
    print(footer)

def main():
    # Silence the piston logger.
    logger = logging.getLogger()
    logger.setLevel(logging.CRITICAL)
    # Initialize logging.
    logger = logging.getLogger('steemvote')
    ch = logging.StreamHandler()
    ch.setFormatter(logging.Formatter('%(asctime)s %(levelname)s [%(name)s] %(message)s'))
    logger.addHandler(ch)
    logger.setLevel(logging.DEBUG)

    # Command-line arguments.
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--config', type=str, default='', help='Path to config file')
    parser.add_argument('-w', '--wif', type=str, help='Private key')
    args = parser.parse_args()

    # Initialize config.
    config = Config()
    config.load(args.config)

    if args.wif:
        config.set('vote_key', args.wif)

    try:
        monitor = Monitor(config)
        vote_interval = config.get_seconds('vote_interval', DEFAULT_VOTE_INTERVAL)
        # Vote interval cannot be less than one second.
        if vote_interval < 1:
            raise ConfigError('The minimum value for "vote_interval" is 1 second')
    except ConfigError as e:
        print('Config Error: %s' % str(e))
        sys.exit(1)

    print_config(monitor)
    t = threading.Thread(target=monitor.run)
    last_vote = time.time()
    try:
        t.start()
        while 1:
            now = time.time()
            try:
                if now - last_vote > vote_interval:
                    monitor.vote_ready_comments()
                    last_vote = now
                else:
                    time.sleep(1)
            except Exception as e:
                logger.error(str(e))
                traceback.print_exc()

    except KeyboardInterrupt:
        logger.info('Received keyboard interrupt. Quitting.')

    monitor.stop()

if __name__ == '__main__':
    main()
